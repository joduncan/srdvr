You might notice that certain core behaviors of these classes are not tested. I feel those are architectural/design
concerns, and probably are best discussed outside of the test framework. I'll try to cover what I feel are
the most relevant topics here. Also, if a topic you think is important or relevant is not covered here, it does
not necessarily mean that I did not consider it. It most likely means that I have gotten tired of typing, and would
prefer to talk about the numerous requirements, feature improvements, etc. verbally and/or in person, instead of writing
more than I have already verbosely done.


UI:
===
While I usually have strong opinions about UI, I also have never focused heavily on implementing my thoughts about
UI in any program I've developed. There are often product owners and other stakeholders who have strong opinions,
so I often find myself trying to reconcile others' thoughts, or gently suggest improvements as I see them. That's
partly why this doesn't actually have a user interface, that would be one of the major areas we'd need to implement
to consider this project "production-ready". I have tried to make many of my decisions in the areas that I have
implemented based upon providing flexible capabilities in the tool, and simplicity in taking advantage of those
capabilities. It should be trivial to write a ruby, python, shell script, or otherwise full-blown Java or HTML5
graphical interface to display and populate both the contents of the config file, and the results of the conflict
chosen resolution algorithm at any point in time. It should also be trivial to run the scheduler in multiple
configurations, both regarding what shows to record, but also regarding how many recordings can be captured at
one time.


Recorder class:
===============
The recording code can be quite simple if you separate the playback of recordings from the storage details
of the recordings. Also, if you trust that the recorder class is internally robust enough to avoid storage conflicts,
you can then simply tell the recorder object(s) when to start or stop a recording. I have made these assumptions
based on the fact that playback has had very little discussion in the problem description. Without more information
any decisions made in relation to playback will be even wilder speculation than I have taken liberties with for parts
of the problem that ARE already mentioned.

So, for better or worse, I am pushing off some playback concerns with the current implementation until later.
When we have to implement playback, we'll will need some amount of cleverness about accessing certain recordings.
We may also need to share some logic(such as a file naming convention) between the recorder and playback classes.
This seems like an acceptable design decision to me, since this is minimal overlap/duplication, can likely be
solved cleanly through an additional abstraction (such as a storage mechanism class that encapsulates the storage
conventions and can be used by both recorder/playback classes), and separates our concerns enough to get the
currently requested work product into the customer's hands.


Scheduler class:
================
I've tried to isolate the conflict resolution from the scheduler implementation. Time will tell how well I have
succeeded (or not).

I've also made the decision to not start the actual scheduling work when a new object is instantiated. This
allows us to use this class in the UI to more easily present to the user which show will be recorded if the
user inputs conflicting recording information. I also feel like it gives us enough control over the class
that we could do fun flexible, scalable architectures in the future.(multiple schedulers running the same
or different conflict algorithms, distributed schedulers, etc)


Recording class:
================
The is_active function is placed here because I needed a common, reasonable place to put this utility-oriented
function. I didn't want to make a full-blown class for each recording, it's fairly simple, so this just holds this
one recording-specific API for right now. I'm also typically against "static" methods(not that ruby really has much
of a hard "convention" in that regard) but this is minor, and not abused(like most singletons typically are),
so I suppose it's ok.


conflict resolution classes:
============================
I tried to pull all recording organization into this conflict resolution component. This should make creating and
using new algorithms fairly easy to do, and by sending in all recordings every time a decision needs to be made,
more advanced algorithms (such as making decisions about hd/sd recording) could be implemented in the future by
extending the data captured for each recording, and enhancing the sorting and conflict resolution algorithm. That
should only require minor changes to the scheduler class, which would hopefully be a nicely decoupled separation of
responsibilities that allows us to develop or change algorithms more rapidly in the future.


scheduling config file format:
==============================
I've picked csv because we have a pretty minimal amount of information(channel, start time, end time) to capture
for each, shall we say, "channel recording configuration entry". something more verbose, such as XML or even
JSON, will only complicate the code, and make 3rd-party interfaces, such as shell scripts or tools developed in
other languages, that much harder to implement. By using a csv file for each scheduler, it also becomes somewhat
easy to classify or separate recordings between multiple schedulers, for example if we wanted to build a recording
farm where multiple machines could record a certain number of streams per node.

Obviously if this was scaled up significantly, one might eventually consider a database to hold the config info.
but right now that's REALLY overkill, so I'm keeping it simple for now to ease implementation, testing, and
developer brainpower.